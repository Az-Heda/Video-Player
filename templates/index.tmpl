<!DOCTYPE html>
<html>

<head>
	<title>Video Player</title>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<link rel="stylesheet" type="text/css" href="/static/css/daisyui.min.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/video-player.css" />
	<link rel="stylesheet" type="text/css" href="/static/css/table-theme.css" />
	<style>
		::-moz-selection {
			color: oklch(var(--sc));
			background: oklch(var(--s));
		}

		::selection {
			color: oklch(var(--sc));
			background: oklch(var(--s));
		}
	</style>
	<script src="/static/js/ag-grid.min.js"></script>
	<script>
		let audioEnabled = false;
		let audio = { audioCtx: null, source: null, gainNode: null };

		function isValidUrl(urlString) {
			try { return Boolean(new URL(urlString)) }
			catch (e) { return false; }
		}

		function initializeAudio() {
			if (!audioEnabled) {
				let audioCtx = new AudioContext();
				let source = audioCtx.createMediaElementSource(video);
				let gainNode = audioCtx.createGain();
				audio = { audioCtx, source, gainNode };
				audio.source.connect(audio.gainNode);
				audio.gainNode.connect(audio.audioCtx.destination);
				document.getElementById('volume-selector').removeAttribute('disabled');
				volume.max = +document.getElementById('volume-selector').value
				audioEnabled = true;
			}
		}

		function disconnectAudio() {
			audio.source.disconnect(audio.gainNode);
			audio.gainNode.disconnect(audio.audioCtx.destination);
			audio = { audioCtx: null, source: null, gainNode: null };
		}

		function setVideoFromFile() {
			if (!video.paused) {
				updatePlayButton();
			}
			let fileItem = document.getElementById('fileInput');
			let files = fileItem.files;
			let file = files[0];
			let url = URL.createObjectURL(file);
			video.src = url;
			video.load();
			video.onloadeddata = () => {
				let videoContainer = document.getElementById('main-container');
				if (videoContainer.classList.contains('hidden')) {
					videoContainer.classList.remove('hidden');
				}
				initializeVideo();
				setVideoTitle(file.name);
				// initializeAudio();
				setTimeout(() => { video.focus(); }, 200);
			}
		}

		function setVideoFromUrl() {
			let input = document.getElementById('videoUrl');
			input.classList.forEach((c) => {
				input.classList.remove(c);
			});
			input.classList.add('form-control', 'w100')
			let url = input.value;
			StreamFromURL(url)
			input.value = '';
		}

		function StreamFromURL(url) {
			removeVideoTitle();
			video.src = url;
			video.load();
			video.onloadeddata = () => {
				let videoContainer = document.getElementById('main-container');
				if (videoContainer.classList.contains('hidden')) {
					videoContainer.classList.remove('hidden');
				}
				initializeVideo();
			}
		}

		function StreamFile(id, filename) {
			const url = "/stream/" + id;
			StreamFromURL(url)
			setVideoTitle(filename);

			const checkbox = document.querySelector(`#watched-video-${id}`);
			if (checkbox) {
				checkbox.checked = true;
			}
		}

		function UpdateVideos() {
			const url = "/update";
			fetch(url, { method: "GET" })
				.then(res => {
					if (res.status == 200) {
						document.location.reload();
					}
				})
		}

		function UpdateTheme(select) {
			window.localStorage.setItem('theme', select.value);
			document.documentElement.setAttribute('data-theme', select.value);
		}
	</script>
</head>

<body class="*:*:font-sans">

	<div class="w-screen min-h-screen flex items-center">
		<aside class="w-96 h-screen">


			<h1 class="w-80 mx-7 text-3xl text-center my-4">Input</h1>
			<label>
				<div class="w-80 mx-7 mb-2 p-4 bg-primary text-primary-content text-center rounded-xl">Select file</div>
				<input type="file" name="file" id="fileInput" accept="video/mp4" onchange="setVideoFromFile()"
					class="hidden" />
			</label>
			<input type="text" name="video-url" id="videoUrl" value="" onchange="setVideoFromUrl();" autocomplete="off"
				placeholder="Insert URL"
				class="w-80 mx-7 w-80 mb-2 input input-bordered rounded-xl input-primary max-w-xs placeholder:text-center" />

			<div class="w-80 mx-7 py-4 divider divider-primary"></div>
			<h1 class="w-80 mx-7 text-3xl text-center my-4">Audio Context</h1>
			<label class="w-80 mx-7 flex gap-2 flex-wrap justify-center items-center">
				<input type="radio" autocomplete="off" class="radio checkbox-sm" onclick="initializeAudio()">
				<span class="block">Enable Audio context</span>
			</label>
			<label class="w-80 mx-7 py-4 form-control">
				<div class="text-label w-full text-center">Volume control</div>
				<select class="select select-primary rounded-xl" id="volume-selector" autocomplete="off"
					onchange="volume.max = this.value" disabled>
					<option value="1">100%</option>
					<option value="2">200%</option>
					<option value="3" selected>300%</option>
					<option value="4">400%</option>
					<option value="5">500%</option>
				</select>
			</label>

			<div class="w-80 mx-7 py-4 divider divider-primary"></div>
			<h1 class="w-80 mx-7 text-3xl text-center my-4">Video commands</h1>
			<table class="w-80 mx-7">
				<tr>
					<td class="w-16"><kbd class="kbd">f</kbd></td>
					<td class="w-0">Toggle fullscreen</td>
				</tr>
				<tr>
					<td class="w-16"><kbd class="kbd">m</kbd></td>
					<td class="w-0">Toggle mute</td>
				</tr>
				<tr>
					<td class="w-16"><kbd class="kbd">p</kbd></td>
					<td class="w-0">Toggle PictureInPicture</td>
				</tr>
				<tr>
					<td class="w-16"><kbd class="kbd">&#8597;</kbd></td>
					<td class="w-0">Up/Down volume</td>
				</tr>
				<tr>
					<td class="w-16"><kbd class="kbd">&#8596;</kbd></td>
					<td class="w-0">Back/Forth 5s</td>
				</tr>
				<tr>
					<td class="w-16"><kbd class="kbd">Space</kbd></td>
					<td class="w-0">Play/Pause</td>
				</tr>
			</table>

			<div class="w-80 mx-7 py-4 divider divider-primary"></div>
			<button class="w-80 mx-7 p-4 bg-secondary text-secondary-content text-center rounded-xl"
				onclick="UpdateVideos()">
				Update videos
			</button>

			<div class="w-80 mx-7 pb-4 divider divider-primary"></div>
			<label class="w-80 mx-7 py-4 form-control">
				<div class="text-label w-full text-center">Select theme</div>
				<select class="select select-primary rounded-xl" id="theme-selector" autocomplete="off"
					onchange="UpdateTheme(this)">
					<option selected disabled>Pick a theme</option>
					<option value="dark">Dark</option>
					<option value="light">Light</option>
					<option value="cupcake">Cupcake</option>
					<option value="bumblebee">Bumblebee</option>
					<option value="emerald">Emerald</option>
					<option value="corporate">Corporate</option>
					<option value="synthwave">Synthwave</option>
					<option value="valentine">Valentine</option>
					<option value="halloween">Halloween</option>
					<option value="garden">Garden</option>
					<option value="forest">Forest</option>
					<option value="lofi">Lofi</option>
					<option value="fantasy">Fantasy</option>
					<option value="wireframe">Wireframe</option>
					<option value="dracula">Dracula</option>
					<option value="autumn">Autumn</option>
					<option value="business">Business</option>
					<option value="night">Night</option>
					<option value="coffee">Coffee</option>
					<option value="winter">Winter</option>
					<option value="dim">Dim</option>
					<option value="nord">Nord</option>
					<option value="sunset">Sunset</option>
				</select>
				<script>
					(() => {
						const select = document.querySelector("#theme-selector");
						const options = select.querySelectorAll('option:not([disabled])');
						const theme = document.documentElement.getAttribute('data-theme')
						const themeInLocalStorage = window.localStorage.getItem('theme');
						if (themeInLocalStorage == null) {
							window.localStorage.setItem('theme', options[0].value);
						}
						for (const option of options) {
							if (option.value == themeInLocalStorage) {
								option.setAttribute('selected', '');
								UpdateTheme(option);
							}
						}

						console.log([...options])
					})();
				</script>
			</label>

		</aside>

		<div class="w-full max-h-screen">
			<h1 class="video-title text-2xl text-center mt-16 mb-8" id="video-title"></h1>
			<div class="container hidden" id="main-container">
				<div class="video-container" id="video-container">
					<div class="playback-animation" id="playback-animation">
						<svg class="playback-icons">
							<use class="hidden" href="#play-icon"></use>
							<use href="#pause"></use>
						</svg>
					</div>

					<video controls id="video" preload="metadata" allow="autoplay fullscreen" tabindex="-1">
						<source src="" type="video/mp4">
						</source>
					</video>

					<div class="video-controls hidden" id="video-controls">
						<div class="video-progress">
							<progress id="progress-bar" value="0" min="0"></progress>
							<input class="seek" id="seek" value="0" min="0" type="range" step="1">
							<div class="seek-tooltip" id="seek-tooltip">00:00</div>
						</div>

						<div class="bottom-controls">
							<div class="left-controls">
								<button data-title="Play" id="play">
									<svg class="playback-icons">
										<use href="#play-icon"></use>
										<use class="hidden" href="#pause"></use>
									</svg>
								</button>

								<div class="volume-controls">
									<button data-title="Mute" class="volume-button" id="volume-button">
										<svg>
											<use class="hidden" href="#volume-mute"></use>
											<use class="hidden" href="#volume-low"></use>
											<use href="#volume-high"></use>
										</svg>
									</button>

									<input class="volume" id="volume" value="1" data-mute="0.01" type="range" max="1"
										min="0" step="0.05">
								</div>

								<div class="time">
									<time id="time-elapsed">00:00</time>
									<span> / </span>
									<time id="duration">00:00</time>
								</div>
							</div>

							<div class="right-controls">
								<button data-title="PIP" class="pip-button" id="pip-button">
									<svg>
										<use href="#pip"></use>
									</svg>
								</button>
								<button data-title="Fullscreen" class="fullscreen-button" id="fullscreen-button">
									<svg>
										<use href="#fullscreen"></use>
										<use href="#fullscreen-exit" class="hidden"></use>
									</svg>
								</button>
							</div>
						</div>
					</div>
				</div>
			</div>
			<!-- <table class="w-full max-w-[80rem] mx-auto table table-lg table-zebra table-pin-rows">
					<thead>
						<tr>
							<th class="w-0"></th>
							<th class="text-left text-xl text-secondary">File</th>
							<th class="text-left text-xl text-secondary">Directory</th>
							<th class="text-left text-xl text-secondary">Duration</th>
							<th class="text-left text-xl text-secondary">Last Modified</th>
							<th class="text-left text-xl text-secondary">Size</th>
						</tr>
					</thead>
					<tbody>
						{{ range $i, $video := $.Data }}
						<tr
							class="transition-colors duration-300 hover:text-secondary"
							onclick="StreamFile('{{ $video.Id }}', '{{ $video.Filename }}')"
						>
							<td>
								<input
									type="checkbox"
									class="checkbox checkbox-primary"
									{{ if $video.Watched }} checked {{ end }}
									onclick="event.preventDefault()"
									autocomplete="off"
									id="watched-video-{{ $video.Id }}"
								/>
							</td>
							<td class="truncate max-w-96">
								{{ $video.Filename }}
								{{ $video.Filename }}
							</td>
							<td class="truncate max-w-32">
								<script>
									(() => {
										const path = '{{ $video.Directory }}';
										document.write(path.replaceAll('\\', '/').split('/').at(-1) + '/');
									})();
								</script>
							</td>
							<td>
								<script>
									document.write(new Date(+"{{ $video.Duration }}").toISOString().substr(11, 8))
								</script>
							</td>
							<td>
								<script>
									(() => {
										const d = new Date(+"{{ $video.LastModified }}")
										const parts = [
											[
												d.getDate(),
												d.getMonth(),
												d.getFullYear(),
											].map(i => i.toString().padStart(2, '0')).join('/'),
											[
												d.getHours(),
												d.getMinutes(),
												d.getSeconds(),
											].map(i => i.toString().padStart(2, '0')).join(':'),
										].join(' - ');

										document.write(parts);
									})()
								</script>
							</td>
							<td>
								<script>
									(() => {
										function humanFileSize(bytes, dp=2) {
											const thresh = 1024;
											if (Math.abs(bytes) < thresh) return bytes + ' B';
											const units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'].map(i => i.toLowerCase())
											let u = -1;
											const r = 10**dp;
											do {
												bytes /= thresh;
												++u;
											} while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
											return bytes.toFixed(dp) + ' ' + units[u];
										}
										document.write(humanFileSize(+'{{ $video.Size }}'))
									})();
								</script>
							</td>
						</tr>
						{{ end }}
					</tbody>
				</table> -->
			<div style="height: 500px; box-sizing: border-box">
				<div id="myGrid" style="height: 100%" class="ag-custom-theme"></div>
			</div>
			<script>

				function humanFileSize(bytes, dp = 2) {
					return bytes
					const thresh = 1024;
					if (Math.abs(bytes) < thresh) return bytes + ' B';
					const units = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'].map(i => i.toLowerCase())
					let u = -1;
					const r = 10 ** dp;
					do {
						bytes /= thresh;
						++u;
					} while (Math.round(Math.abs(bytes) * r) / r >= thresh && u < units.length - 1);
					return bytes.toFixed(dp) + ' ' + units[u];
				}

				let gridApi;
				const data = createRowData()

				function onSelectionChanged() {
					const selectedRows = gridApi.getSelectedRows();
					if (selectedRows.length > 0) {
						const row = selectedRows[0];
						console.log(selectedRows);
						StreamFile(row.Id, row.Filename);

						if (!row.Watched) {
							row.Watched = true;
							// gridApi.setGridOption("rowData", data.filter(i => i.Id != row.Id).concat(row));
							const checkbox = document.querySelector(`#video-checkbox-${row.Id}`);
							checkbox.checked = true;
						}

					}
				}

				const gridOptions = {
					pagination: true,
					paginationPageSize: 100,
					paginationPageSizeSelector: [10, 20, 50, 100],
					defaultColDef: {
						editable: false,
						flex: 1,
						filter: false,
						sortable: true,
						resizable: false,
						floatingFilter: true,
					},
					rowSelection: "single",
					onSelectionChanged: onSelectionChanged,
					columnDefs: [
						{
							headerName: "",
							field: "Watched",
							filter: "agSetColumnFilter",
							sortable: true,
							autosize: true,
							cellRenderer: (param) => {
								return `<div class="flex justify-center items-center w-full">
										<input type="checkbox" ${(param.data.Watched) ? 'checked' : ''} id="video-checkbox-${param.data.Id}" class="checkbox checkbox-primary mx-auto" onclick="event.preventDefault()"/>
									</div>`;
							}
						},
						{
							headerName: "Filename",
							field: "Filename",
							filter: "agTextColumnFilter",
							flex: 4,
							sortable: true,
						},
						{
							headerName: "Directory",
							field: "Directory",
							filter: "agTextColumnFilter",
							flex: 1,
							sortable: true,
						},
						{
							headerName: "Duration",
							field: "Duration",
							autosize: true,
							cellRenderer: (param) => {
								return new Date(param.data.Duration).toISOString().substr(11, 8)
							}
						},
						{
							headerName: "Last Modified",
							field: "LastModified",
							autosize: true,
							filter: "agDateColumnFilter",
							cellRenderer: (param) => {
								return new Date(param.data.LastModified).toISOString().split('.').at(0).split('T').join(' - ')
							}
						},
						{
							headerName: "Size (mb)",
							field: "Size",
							filter: "agNumberColumnFilter",
							autosize: true,
							cellRenderer: (param) => {
								return (param.data.Size / 1024 / 1024).toFixed(2) + "mb";
							}
						},
					],
					rowData: data,
					onGridReady: (params) => {
						var cols = params.api.getColumns();
						cols.forEach((col) => {
							var colDef = col.getColDef();
							console.log(
								colDef.headerName + ", Column ID = " + col.getId(),
								JSON.stringify(colDef),
							);
						});
					},
				};

				function createRowData() {
					return JSON.parse('{{ $.RawData }}')
				}

				document.addEventListener("DOMContentLoaded", function () {
					var gridDiv = document.querySelector("#myGrid");
					gridApi = agGrid.createGrid(gridDiv, gridOptions);
				});
			</script>
		</div>
	</div>

	<svg style="display: none">
		<defs>
			<symbol id="pause" viewBox="0 0 24 24">
				<path d="M14.016 5.016h3.984v13.969h-3.984v-13.969zM6 18.984v-13.969h3.984v13.969h-3.984z"></path>
			</symbol>

			<symbol id="play-icon" viewBox="0 0 24 24">
				<path d="M8.016 5.016l10.969 6.984-10.969 6.984v-13.969z"></path>
			</symbol>

			<symbol id="volume-high" viewBox="0 0 24 24">
				<path
					d="M14.016 3.234q3.047 0.656 5.016 3.117t1.969 5.648-1.969 5.648-5.016 3.117v-2.063q2.203-0.656 3.586-2.484t1.383-4.219-1.383-4.219-3.586-2.484v-2.063zM16.5 12q0 2.813-2.484 4.031v-8.063q1.031 0.516 1.758 1.688t0.727 2.344zM3 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6z">
				</path>
			</symbol>

			<symbol id="volume-low" viewBox="0 0 24 24">
				<path
					d="M5.016 9h3.984l5.016-5.016v16.031l-5.016-5.016h-3.984v-6zM18.516 12q0 2.766-2.531 4.031v-8.063q1.031 0.516 1.781 1.711t0.75 2.32z">
				</path>
			</symbol>

			<symbol id="volume-mute" viewBox="0 0 24 24">
				<path
					d="M12 3.984v4.219l-2.109-2.109zM4.266 3l16.734 16.734-1.266 1.266-2.063-2.063q-1.547 1.313-3.656 1.828v-2.063q1.172-0.328 2.25-1.172l-4.266-4.266v6.75l-5.016-5.016h-3.984v-6h4.734l-4.734-4.734zM18.984 12q0-2.391-1.383-4.219t-3.586-2.484v-2.063q3.047 0.656 5.016 3.117t1.969 5.648q0 2.203-1.031 4.172l-1.5-1.547q0.516-1.266 0.516-2.625zM16.5 12q0 0.422-0.047 0.609l-2.438-2.438v-2.203q1.031 0.516 1.758 1.688t0.727 2.344z">
				</path>
			</symbol>

			<symbol id="fullscreen" viewBox="0 0 24 24">
				<path
					d="M14.016 5.016h4.969v4.969h-1.969v-3h-3v-1.969zM17.016 17.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 9.984v-4.969h4.969v1.969h-3v3h-1.969zM6.984 14.016v3h3v1.969h-4.969v-4.969h1.969z">
				</path>
			</symbol>

			<symbol id="fullscreen-exit" viewBox="0 0 24 24">
				<path
					d="M15.984 8.016h3v1.969h-4.969v-4.969h1.969v3zM14.016 18.984v-4.969h4.969v1.969h-3v3h-1.969zM8.016 8.016v-3h1.969v4.969h-4.969v-1.969h3zM5.016 15.984v-1.969h4.969v4.969h-1.969v-3h-3z">
				</path>
			</symbol>

			<symbol id="pip" viewBox="0 0 24 24">
				<path
					d="M21 19.031v-14.063h-18v14.063h18zM23.016 18.984q0 0.797-0.609 1.406t-1.406 0.609h-18q-0.797 0-1.406-0.609t-0.609-1.406v-14.016q0-0.797 0.609-1.383t1.406-0.586h18q0.797 0 1.406 0.586t0.609 1.383v14.016zM18.984 11.016v6h-7.969v-6h7.969z">
				</path>
			</symbol>
		</defs>
	</svg>

	<script src="/static/js/video-player.js"></script>
	<script src="/static/js/tailwind.min.js"></script>

</body>

</html>